{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","registerServiceWorker.js","index.js"],"names":["SearchBar","props","state","search","bind","handleTermChange","handleKeyPress","event","this","setState","target","value","onSearch","key","className","placeholder","onChange","onKeyUp","href","onClick","React","Component","Track","isRemoval","addTrack","removeTrack","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistName","playlistTracks","onSave","accessToken","Spotify","getAccessToken","token","window","location","match","expires","expiresIn","Number","setTimeout","history","pushState","term","fetch","headers","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","push","filter","addedTrack","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yWA4CeA,G,8DAxCd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAEDC,MAAQ,CACZC,OAAQ,IAGT,EAAKA,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBATJ,E,6DAYFG,GAChBC,KAAKC,SAAS,CAACN,OAAQI,EAAMG,OAAOC,U,+BAIpCH,KAAKP,MAAMW,SAASJ,KAAKN,MAAMC,U,qCAGjBI,GACG,UAAdA,EAAMM,KAERL,KAAKP,MAAMW,SAASJ,KAAKN,MAAMC,U,+BAKhC,OACC,yBAAKW,UAAU,aACb,2BACCC,YAAY,iCACZC,SAAUR,KAAKH,iBACfY,QAAST,KAAKF,iBACd,uBAAGY,KAAK,KAAKC,QAASX,KAAKL,QAA3B,e,GAnCkBiB,IAAMC,YCyCfC,G,oEAxCd,WAAYrB,GAAQ,IAAD,8BAClB,cAAMA,IAEDC,MAAQ,CACZqB,WAAW,GAGZ,EAAKC,SAAW,EAAKA,SAASpB,KAAd,gBAChB,EAAKqB,YAAc,EAAKA,YAAYrB,KAAjB,gBARD,E,2DAYlB,OAAII,KAAKP,MAAMsB,UACP,uBAAGL,KAAK,KAAKC,QAASX,KAAKiB,YAAaX,UAAU,gBAAlD,KAEA,uBAAGI,KAAK,KAAKC,QAASX,KAAKgB,SAAUV,UAAU,gBAA/C,O,+BAIAP,GACRC,KAAKP,MAAMyB,MAAMlB,KAAKP,MAAM0B,S,kCAGjBpB,GACXC,KAAKP,MAAM2B,SAASpB,KAAKP,MAAM0B,S,+BAI/B,OACC,yBAAKb,UAAU,SACd,yBAAKA,UAAU,qBACd,4BAAKN,KAAKP,MAAM0B,MAAME,MACtB,2BAAIrB,KAAKP,MAAM0B,MAAMG,OAArB,MAAgCtB,KAAKP,MAAM0B,MAAMI,QAEjDvB,KAAKwB,oB,GAnCUZ,IAAMC,YCsBXY,E,uKAnBJ,IAAD,OACR,OACC,yBAAKnB,UAAU,aAEbN,KAAKP,MAAMiC,OAAOC,KAAI,SAAAR,GACrB,OAAO,kBAAC,EAAD,CACNd,IAAKc,EAAMS,GACXT,MAAOA,EACPD,MAAO,EAAKzB,MAAMyB,MAClBE,SAAU,EAAK3B,MAAM2B,SACrBL,UAAW,EAAKtB,MAAMsB,oB,GAZLH,IAAMC,WCYfgB,E,uKATb,OACC,yBAAKvB,UAAU,iBACd,uCACA,kBAAC,EAAD,CAAWoB,OAAQ1B,KAAKP,MAAMqC,cAAeZ,MAAOlB,KAAKP,MAAMyB,a,GANvCN,IAAMC,WCiCnBkB,G,wDAhCd,WAAYtC,GAAQ,IAAD,8BAClB,cAAMA,IAEDuC,iBAAmB,EAAKA,iBAAiBpC,KAAtB,gBACxB,EAAKF,MAAQ,CACZqB,WAAW,GALM,E,6DASFhB,GAChBC,KAAKP,MAAMwC,aAAalC,EAAMG,OAAOC,S,+BAIrC,OACC,yBAAKG,UAAU,YACd,2BACC4B,aAAclC,KAAKP,MAAM0C,aACzB3B,SAAUR,KAAKgC,mBAEhB,kBAAC,EAAD,CACCG,aAAcnC,KAAKP,MAAM0C,aACzBT,OAAQ1B,KAAKP,MAAM2C,eACnBhB,SAAUpB,KAAKP,MAAM2B,SACrBL,UAAWf,KAAKN,MAAMqB,YAEvB,uBAAGL,KAAK,KAAKJ,UAAU,gBAAgBK,QAASX,KAAKP,MAAM4C,QAA3D,wB,GA3BmBzB,IAAMC,YCHzByB,EAAc,GAKZC,EAAU,CAEfC,eAFe,WAGd,GAAGF,EACF,OAAOA,EAGR,IAAMG,EAAQC,OAAOC,SAASjC,KAAKkC,MAAM,wBACnCC,EAAUH,OAAOC,SAASjC,KAAKkC,MAAM,sBAE3C,GAAIH,GAASI,EAAS,CACrBP,EAAcG,EAAM,GACpB,IAAIK,EAAYC,OAAOF,EAAQ,IAI/B,OAFAH,OAAOM,YAAW,kBAAMV,EAAc,KAAgB,IAAZQ,GAC1CJ,OAAOO,QAAQC,UAAU,eAAgB,KAAM,KACxCZ,EAGPI,OAAOC,SAAP,2DAzBc,mCAyBd,0EArBiB,iDA0BnBhD,OAxBe,SAwBRwD,GAIN,OAFAb,EAAcC,EAAQC,iBAEfY,MAAM,kDAAD,OAAmDD,GAAQ,CACtEE,QAAS,CACF,cAAgB,UAAhB,OAA2Bf,MAEhCgB,MAAK,SAAAC,GACP,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,OAAKA,EAAa/B,OACX+B,EAAa/B,OAAOgC,MAAM/B,KAAI,SAAAR,GACpC,MAAO,CACNS,GAAIT,EAAMS,GACVP,KAAMF,EAAME,KACZC,OAAQH,EAAMwC,QAAQ,GAAGtC,KACzBE,MAAOJ,EAAMI,MAAMF,KACnBuC,IAAKzC,EAAMyC,QAPoB,OAanCC,aAhDe,SAgDF1B,EAAc2B,GAC1B,GAAI3B,GAAiB2B,EAArB,CAIA,IAEIC,EAFAzB,EAAcC,EAAQC,iBACtBa,EAAU,CAAC,cAAgB,UAAhB,OAA2Bf,IAG1C,OAAOc,MAAM,gCAAiC,CAACC,QAASA,IACtDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEN,OADAM,EAASN,EAAa7B,GACfwB,MAAM,oCAAD,OAAqCW,EAArC,cAAyD,CACpEV,QAASA,EACTW,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAC9C,KAAMc,MAE5BmB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACN,IAAIW,EAAaX,EAAa7B,GAC9B,OAAOwB,MAAM,oCAAD,OAAqCW,EAArC,sBAAyDK,EAAzD,WAA8E,CACzFf,QAASA,EACTW,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACE,KAAMP,eAOjBvB,ICHA+B,E,kDA1Eb,WAAY7E,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXoC,cAAe,GACfK,aAAc,eACdC,eAAgB,IAGlB,EAAKpB,SAAW,EAAKA,SAASpB,KAAd,gBAChB,EAAKqB,YAAc,EAAKA,YAAYrB,KAAjB,gBACnB,EAAK2E,mBAAqB,EAAKA,mBAAmB3E,KAAxB,gBAC1B,EAAKiE,aAAe,EAAKA,aAAajE,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAbG,E,qDAgBVuB,GACP,IAAIO,EAAS1B,KAAKN,MAAM0C,eACxBV,EAAO8C,KAAKrD,GACZnB,KAAKC,SAAS,CAACmC,eAAgBV,M,kCAGrBP,GACV,IAAIO,EAAS1B,KAAKN,MAAM0C,eACxBV,EAASA,EAAO+C,QAAO,SAAAC,GAAU,OAAIA,EAAW9C,KAAOT,EAAMS,MAC7D5B,KAAKC,SAAS,CAACmC,eAAgBV,M,qCAGjB,IAAD,OACToC,EAAY9D,KAAKN,MAAM0C,eAAeT,KAAI,SAAAR,GAAK,OAAIA,EAAMyC,OAE7DrB,EAAQsB,aAAa7D,KAAKN,MAAMyC,aAAc2B,GAAWR,MAAK,WAC5D,EAAKrD,SAAS,CACZkC,aAAc,eACdC,eAAgB,U,6BAKfe,GAAO,IAAD,OACXZ,EAAQ5C,OAAOwD,GAAMG,MAAK,SAAAxB,GACxB,EAAK7B,SAAS,CAAC6B,cAAeA,S,yCAIfT,GACjBrB,KAAKC,SAAS,CAACkC,aAAcd,M,+BAI7B,OACE,6BACE,iCAAM,0BAAMf,UAAU,aAAhB,OAAN,OACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAWF,SAAUJ,KAAKL,SAC1B,yBAAKW,UAAU,gBACb,kBAAC,EAAD,CACEwB,cAAe9B,KAAKN,MAAMoC,cAC1BZ,MAAOlB,KAAKgB,WAEd,kBAAC,EAAD,CACEoB,eAAgBpC,KAAKN,MAAM0C,eAC3BD,aAAcnC,KAAKN,MAAMyC,aACzBF,aAAcjC,KAAKuE,mBACnBnD,SAAUpB,KAAKiB,YACfoB,OAAQrC,KAAK6D,sB,GAlEThD,aCGZ8D,EAAcC,QACW,cAA7BlC,OAAOC,SAASkC,UAEe,UAA7BnC,OAAOC,SAASkC,UAEhBnC,OAAOC,SAASkC,SAASjC,MACvB,2DAsCN,SAASkC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTzB,MAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3F,QACfsF,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,eAAwBxD,OAAOC,UAC3CwD,SAAWzD,OAAOC,SAASwD,OAIvC,OAGFzD,OAAO0D,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,eAAN,sBAEPvB,IAiDV,SAAiCI,GAE/B3B,MAAM2B,GACHzB,MAAK,SAAAC,GAGkB,MAApBA,EAAS8C,SACuD,IAAhE9C,EAASF,QAAQiD,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMlD,MAAK,SAAA6B,GACjCA,EAAasB,aAAanD,MAAK,WAC7BZ,OAAOC,SAAS+D,eAKpB5B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEArEAiB,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAMlD,MAAK,WACjCmC,QAAQC,IACN,gHAMJZ,EAAgBC,OCzCxB6B,K","file":"static/js/main.907e883e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tsearch: ''\r\n\t\t};\r\n\r\n\t\tthis.search = this.search.bind(this);\r\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\r\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\r\n\t}\r\n\r\n\thandleTermChange(event) {\r\n\t\tthis.setState({search: event.target.value})\r\n\t}\r\n\r\n\tsearch() {\r\n\t\tthis.props.onSearch(this.state.search);\r\n\t}\r\n\r\n\thandleKeyPress(event) {\r\n\t\tif(event.key === 'Enter') {\r\n\t\t\t//console.log('Enter pressed');\r\n\t\t\tthis.props.onSearch(this.state.search);\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchBar\">\r\n \t\t\t\t<input \r\n \t\t\t\t\tplaceholder=\"Enter A Song, Album, or Artist\" \r\n \t\t\t\t\tonChange={this.handleTermChange} \r\n \t\t\t\t\tonKeyUp={this.handleKeyPress}/>\r\n  \t\t\t\t<a href=\"!#\" onClick={this.search} >SEARCH</a>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\tisRemoval: false\r\n\t\t};\r\n\r\n\t\tthis.addTrack = this.addTrack.bind(this);\r\n\t\tthis.removeTrack = this.removeTrack.bind(this);\r\n\t}\r\n\r\n\trenderAction() {\r\n\t\tif (this.props.isRemoval) {\r\n\t\t\treturn <a href=\"!#\" onClick={this.removeTrack} className=\"Track-action\">-</a>\r\n\t\t} else {\r\n\t\t\treturn <a href=\"!#\" onClick={this.addTrack} className=\"Track-action\">+</a>\r\n\t\t}\r\n\t}\r\n\r\n\taddTrack(event) {\r\n\t\tthis.props.onAdd(this.props.track)\r\n\t}\r\n\r\n\tremoveTrack(event) {\r\n\t\tthis.props.onRemove(this.props.track)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Track\">\r\n\t\t\t\t<div className=\"Track-information\">\r\n\t\t\t\t\t<h3>{this.props.track.name}</h3>\r\n\t\t\t\t\t<p>{this.props.track.artist} | {this.props.track.album}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.renderAction()}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from './../Track/Track'\r\n\r\nclass TrackList extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"TrackList\" >\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.props.tracks.map(track => {\r\n\t\t\t\t\t\treturn <Track \r\n\t\t\t\t\t\t\tkey={track.id} \r\n\t\t\t\t\t\t\ttrack={track} \r\n\t\t\t\t\t\t\tonAdd={this.props.onAdd}\r\n\t\t\t\t\t\t\tonRemove={this.props.onRemove}\r\n\t\t\t\t\t\t\tisRemoval={this.props.isRemoval}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from './../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"SearchResults\"  >\r\n\t\t\t\t<h2>Results</h2>\r\n\t\t\t\t<TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd}/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from './../TrackList/TrackList'\r\n\r\nclass Playlist extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\r\n\t\tthis.state = {\r\n\t\t\tisRemoval: true\r\n\t\t}\r\n\t}\r\n\r\n\thandleNameChange(event) {\r\n\t\tthis.props.onNameChange(event.target.value)\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"Playlist\" >\r\n\t\t\t\t<input \r\n\t\t\t\t\tdefaultValue={this.props.playlistName}\r\n\t\t\t\t\tonChange={this.handleNameChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<TrackList \r\n\t\t\t\t\tplaylistName={this.props.playlistName} \r\n\t\t\t\t\ttracks={this.props.playlistTracks} \r\n\t\t\t\t\tonRemove={this.props.onRemove}\r\n\t\t\t\t\tisRemoval={this.state.isRemoval}\r\n\t\t\t\t/>\r\n\t\t\t\t<a href=\"!#\" className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Playlist;","const clientId = 'd9a44706f05e4c70a45fccfa2bad0007'\r\nlet accessToken = '';\r\n//const redirectUri = 'http://JAMMMING_URL.surge.sh/';\r\n//const redirectUri = 'http://localhost:3000';\r\nconst redirectUri = 'https://equintanilla20.github.io/jammming_v2';\r\n\r\nconst Spotify = {\r\n\r\n\tgetAccessToken() {\r\n\t\tif(accessToken) {\r\n\t\t\treturn accessToken\r\n\t\t}\r\n\r\n\t\tconst token = window.location.href.match(/access_token=([^&]*)/);\r\n\t\tconst expires = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n\t\tif (token && expires) {\r\n\t\t\taccessToken = token[1];\r\n\t\t\tlet expiresIn = Number(expires[1]);\r\n\r\n\t\t\twindow.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n\t\t\twindow.history.pushState('Access Token', null, '/');\r\n\t\t\treturn accessToken;\r\n\t\t\r\n\t\t} else {\r\n\t\t\twindow.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tsearch(term) {\r\n\r\n\t\taccessToken = Spotify.getAccessToken();\r\n\r\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n\t\t\theaders: {\r\n       \t\t\t'Authorization': `Bearer ${accessToken}`\r\n   \t\t\t}\r\n\t\t}).then(response => {\r\n\t\t\treturn response.json()\r\n\t\t}).then(jsonResponse => {\r\n\t\t\tif (!jsonResponse.tracks) return [];\r\n\t\t\treturn jsonResponse.tracks.items.map(track => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: track.id,\r\n\t\t\t\t\tname: track.name,\r\n\t\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\t\talbum: track.album.name,\r\n\t\t\t\t\turi: track.uri\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\r\n\tsavePlaylist(playlistName, trackURIs) {\r\n\t\tif(!playlistName || !trackURIs) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet accessToken = Spotify.getAccessToken();\r\n\t\tlet headers = {'Authorization': `Bearer ${accessToken}`};\r\n\t\tlet userId;\r\n\r\n\t\treturn fetch(`https://api.spotify.com/v1/me`, {headers: headers}\r\n\t\t).then(response => response.json()\r\n\t\t).then(jsonResponse => {\r\n\t\t\tuserId = jsonResponse.id;\r\n\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n\t\t\t\theaders: headers,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({name: playlistName})\r\n\t\t\t}\r\n\t\t).then(response => response.json()\r\n\t\t).then(jsonResponse => {\r\n\t\t\tlet playlistId = jsonResponse.id;\r\n\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n\t\t\t\theaders: headers,\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: JSON.stringify({uris: trackURIs})\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport default Spotify;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './../SearchBar/SearchBar';\nimport SearchResults from './../SearchResults/SearchResults';\nimport Playlist from './../Playlist/Playlist';\nimport Spotify from './../../util/Spotify'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: [],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  };\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(addedTrack => addedTrack.id !== track.id)\n    this.setState({playlistTracks: tracks});\n  }\n\n  savePlaylist() {\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\n\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      });\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    })\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults \n              searchResults={this.state.searchResults} \n              onAdd={this.addTrack}\n            />\n            <Playlist \n              playlistTracks={this.state.playlistTracks} \n              playlistName={this.state.playlistName} \n              onNameChange={this.updatePlaylistName}\n              onRemove={this.removeTrack}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}